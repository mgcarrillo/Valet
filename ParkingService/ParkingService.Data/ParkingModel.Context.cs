//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkingService.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ValetDBEntities : DbContext
    {
        public ValetDBEntities()
            : base("name=ValetDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<sp_GetParkingInRadius_Result> sp_GetParkingInRadius(Nullable<double> myLat, Nullable<double> myLong, Nullable<double> radius)
        {
            var myLatParameter = myLat.HasValue ?
                new ObjectParameter("myLat", myLat) :
                new ObjectParameter("myLat", typeof(double));
    
            var myLongParameter = myLong.HasValue ?
                new ObjectParameter("myLong", myLong) :
                new ObjectParameter("myLong", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetParkingInRadius_Result>("sp_GetParkingInRadius", myLatParameter, myLongParameter, radiusParameter);
        }
    
        public virtual ObjectResult<sp_GetOperatorById_Result> sp_GetOperatorById(Nullable<int> operatorId)
        {
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("operatorId", operatorId) :
                new ObjectParameter("operatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOperatorById_Result>("sp_GetOperatorById", operatorIdParameter);
        }
    
        public virtual int sp_Operator_Insert(string operatorName, Nullable<double> latitude, Nullable<double> longitude, string address1, string city, string state, string zip, string phone, string websiteUrl, Nullable<int> numberOfSpaces, Nullable<decimal> initialFee, Nullable<int> initialHours, Nullable<decimal> hourlyFee, Nullable<bool> acceptsCash, Nullable<bool> acceptsCredit, Nullable<bool> coveredParking, Nullable<bool> open24Hours, Nullable<int> hourOpen, Nullable<int> hourClosed, Nullable<bool> eventParking, Nullable<bool> parkingGarage)
        {
            var operatorNameParameter = operatorName != null ?
                new ObjectParameter("OperatorName", operatorName) :
                new ObjectParameter("OperatorName", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var websiteUrlParameter = websiteUrl != null ?
                new ObjectParameter("WebsiteUrl", websiteUrl) :
                new ObjectParameter("WebsiteUrl", typeof(string));
    
            var numberOfSpacesParameter = numberOfSpaces.HasValue ?
                new ObjectParameter("NumberOfSpaces", numberOfSpaces) :
                new ObjectParameter("NumberOfSpaces", typeof(int));
    
            var initialFeeParameter = initialFee.HasValue ?
                new ObjectParameter("InitialFee", initialFee) :
                new ObjectParameter("InitialFee", typeof(decimal));
    
            var initialHoursParameter = initialHours.HasValue ?
                new ObjectParameter("InitialHours", initialHours) :
                new ObjectParameter("InitialHours", typeof(int));
    
            var hourlyFeeParameter = hourlyFee.HasValue ?
                new ObjectParameter("HourlyFee", hourlyFee) :
                new ObjectParameter("HourlyFee", typeof(decimal));
    
            var acceptsCashParameter = acceptsCash.HasValue ?
                new ObjectParameter("AcceptsCash", acceptsCash) :
                new ObjectParameter("AcceptsCash", typeof(bool));
    
            var acceptsCreditParameter = acceptsCredit.HasValue ?
                new ObjectParameter("AcceptsCredit", acceptsCredit) :
                new ObjectParameter("AcceptsCredit", typeof(bool));
    
            var coveredParkingParameter = coveredParking.HasValue ?
                new ObjectParameter("CoveredParking", coveredParking) :
                new ObjectParameter("CoveredParking", typeof(bool));
    
            var open24HoursParameter = open24Hours.HasValue ?
                new ObjectParameter("Open24Hours", open24Hours) :
                new ObjectParameter("Open24Hours", typeof(bool));
    
            var hourOpenParameter = hourOpen.HasValue ?
                new ObjectParameter("HourOpen", hourOpen) :
                new ObjectParameter("HourOpen", typeof(int));
    
            var hourClosedParameter = hourClosed.HasValue ?
                new ObjectParameter("HourClosed", hourClosed) :
                new ObjectParameter("HourClosed", typeof(int));
    
            var eventParkingParameter = eventParking.HasValue ?
                new ObjectParameter("EventParking", eventParking) :
                new ObjectParameter("EventParking", typeof(bool));
    
            var parkingGarageParameter = parkingGarage.HasValue ?
                new ObjectParameter("ParkingGarage", parkingGarage) :
                new ObjectParameter("ParkingGarage", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Operator_Insert", operatorNameParameter, latitudeParameter, longitudeParameter, address1Parameter, cityParameter, stateParameter, zipParameter, phoneParameter, websiteUrlParameter, numberOfSpacesParameter, initialFeeParameter, initialHoursParameter, hourlyFeeParameter, acceptsCashParameter, acceptsCreditParameter, coveredParkingParameter, open24HoursParameter, hourOpenParameter, hourClosedParameter, eventParkingParameter, parkingGarageParameter);
        }
    
        public virtual int sp_Driver_Insert(string driverName, Nullable<double> latitude, Nullable<double> longitude, string deviceID, Nullable<System.DateTime> expires)
        {
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            var expiresParameter = expires.HasValue ?
                new ObjectParameter("Expires", expires) :
                new ObjectParameter("Expires", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Driver_Insert", driverNameParameter, latitudeParameter, longitudeParameter, deviceIDParameter, expiresParameter);
        }
    
        public virtual ObjectResult<sp_DriverById_Result> sp_DriverById(Nullable<int> driverId)
        {
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DriverById_Result>("sp_DriverById", driverIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAllDrivers_Result> sp_GetAllDrivers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllDrivers_Result>("sp_GetAllDrivers");
        }
    
        public virtual ObjectResult<sp_GetAllOperators_Result> sp_GetAllOperators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOperators_Result>("sp_GetAllOperators");
        }
    
        public virtual ObjectResult<sp_GetDriversToBeNotified_Result> sp_GetDriversToBeNotified()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDriversToBeNotified_Result>("sp_GetDriversToBeNotified");
        }
    
        public virtual int sp_DriverNotified(Nullable<int> driverId)
        {
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("driverId", driverId) :
                new ObjectParameter("driverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriverNotified", driverIdParameter);
        }
    
        public virtual int sp_UpdateExpires(string deviceID, Nullable<System.DateTime> expires)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            var expiresParameter = expires.HasValue ?
                new ObjectParameter("Expires", expires) :
                new ObjectParameter("Expires", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateExpires", deviceIDParameter, expiresParameter);
        }
    }
}
